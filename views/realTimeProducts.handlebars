<<<<<<< HEAD
<h1>Lista de Productos en Tiempo Real</h1>

<form id="productForm">
  <input type="text" name="title" placeholder="Nombre" required />
  <input type="number" name="price" placeholder="Precio" required />
  <input type="text" name="description" placeholder="Descripción" required />
  <button type="submit">Agregar producto</button>
</form>

<form id="deleteForm">
  <input type="text" name="id" placeholder="ID a eliminar" required />
  <button type="submit">Eliminar producto</button>
</form>

<ul id="productList"></ul>

<script src="/socket.io/socket.io.js"></script>
<script src="/js/realtime.js"></script>
=======
<h1>Productos en tiempo real</h1>

<label>Filtrar por categoría o status:</label>
<input type="text" id="filter-query" placeholder="Ej: electronics">
<label>Ordenar por precio:</label>
<select id="sort-select">
  <option value="">-- Sin orden --</option>
  <option value="asc">Ascendente</option>
  <option value="desc">Descendente</option>
</select>
<button id="apply-filters">Aplicar</button>

<ul id="products-list"></ul>

<h2>Agregar producto</h2>
<form id="new-product-form">
  <input type="text" name="title" placeholder="Título" required>
  <input type="number" name="price" placeholder="Precio" required>
  <input type="text" name="category" placeholder="Categoría">
  <input type="number" name="stock" placeholder="Stock" value="1">
  <input type="text" name="description" placeholder="Descripción">
  <button type="submit">Agregar</button>
</form>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();
let currentPage = 1;
let currentQuery = '';
let currentSort = '';

function renderProducts(products) {
  const list = document.getElementById('products-list');
  list.innerHTML = '';
  products.forEach(p => {
    const li = document.createElement('li');
    li.innerHTML = `
      <h3>${p.title}</h3>
      <p>Precio: $${p.price}</p>
      <p>Categoría: ${p.category}</p>
      <p>Stock: ${p.stock}</p>
      <p>Descripción: ${p.description}</p>
      <button onclick="addToCart('${p._id}')">Agregar al carrito</button>
      <button onclick="deleteProduct('${p._id}')">Eliminar</button>
    `;
    list.appendChild(li);
  });
}

// Función para traer productos desde backend con filtros y paginación
async function fetchProducts() {
  const res = await fetch(`/api/products?limit=10&page=${currentPage}&sort=${currentSort}&query=${currentQuery}`);
  const data = await res.json();
  renderProducts(data.docs);
}

// Aplicar filtros y orden
document.getElementById('apply-filters').addEventListener('click', () => {
  currentQuery = document.getElementById('filter-query').value;
  currentSort = document.getElementById('sort-select').value;
  currentPage = 1;
  fetchProducts();
});

// Escuchar WebSocket para actualizar la lista
socket.on('update-products', () => fetchProducts());

// Agregar producto
document.getElementById('new-product-form').addEventListener('submit', (e) => {
  e.preventDefault();
  const form = e.target;
  const data = {
    title: form.title.value,
    price: parseFloat(form.price.value),
    category: form.category.value,
    stock: parseInt(form.stock.value),
    description: form.description.value
  };
  socket.emit('new-product', data);
  form.reset();
});

// Eliminar producto
function deleteProduct(id) {
  socket.emit('delete-product', id);
}

// Agregar al carrito
function addToCart(productId) {
  fetch(`/api/carts/1/products/${productId}`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ quantity: 1 })
  }).then(res => {
    if(res.ok) alert('Producto agregado al carrito');
    else alert('Error al agregar producto');
  });
}

// Inicialmente traer productos
fetchProducts();
</script>
>>>>>>> a1f3728 (proyecto final a medio terminar)
